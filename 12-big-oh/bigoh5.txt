Give a tight bound of the nearest runtime complexity class for each of the following code fragments in Big-Oh notation, in terms of the variable N. In other words, write the code's growth rate as N grows. Write a simple expression that gives only a power of N using a caret ^ character for exponentiation, such as O(N^2) to represent O(N2) or O(log N) to represent O(log2 N). Do not write an exact calculation of the runtime such as O(2N3 + 4N + 14).


// a)
int sum = 0;
for (int i = 1; i <= N; i++) {
    for (int j = 1; j <= 2 * N; j++) {
        sum++;
    }
}
cout << sum << endl;
answer: O(N^2)
 
// b)
int sum = 0;
for (int i = 1; i <= 100000; i++) {
    for (int j = 1; j <= i; j++) {
        for (int k = 1; k <= N; k++) {
            sum++;
        }
    }
}
for (int x = 1; x <= N; x += 2) {
    sum++;
}
cout << sum << endl;
answer: O(N) 
 
// c)
Vector<int> v;
for (int i = 1; i <= N; i++) {
    v.insert(0, i);
}
HashSet<int> s;
for (int k : v) {
    s.add(k);
}
cout << "done!" << endl;
answer: O(N^2)
 
// d)
Queue<int> q;
for (int i = 1; i <= 2*N; i++) {
    q.enqueue(i);
}
â€‹
Map<int, int> map;
while (!q.isEmpty()) {
    int k = q.dequeue();
    map[k] = -k;
}
cout << "done!" << endl;
answer:  O(NlogN)
 
// e)
HashMap<int, int> map;
for (int i = 1; i <= N * N; i++) {
    map.put(i, i*i);
}
HashSet<int> set;
for (int k : map) {
    set.add(map.get(k));
}
cout << "done!" << endl;
answer:  O(N^2)
