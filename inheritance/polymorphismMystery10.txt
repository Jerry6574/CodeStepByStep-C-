Consider the following classes; assume that each is defined in its own file.

class Jesse : public Tulip {
public:
    virtual void m1() {
        cout << "Js1  ";
        Cassidy::m1();
    }
​
    virtual void m4() {
        cout << "Js4  ";
        m2();
    }
};
​
class Cassidy {
public:
    virtual void m1() {
        cout << "Ca1  ";
        m2();
    }
​
    virtual void m2() {
        cout << "Ca2  ";
    }
};
​
class Tulip : public Cassidy {
public:
    virtual void m2() {
        cout << "Tu2  ";
        Cassidy::m2();
    }
​
    virtual void m3() {
        cout << "Tu3  ";
        m1();
    }
};
Now assume that the following variables are defined:

Cassidy*  var1 = new Tulip();
Tulip*    var2 = new Jesse();

In the table below, indicate in the right-hand column the output produced by the statement in the left-hand column. If the statement produces more than one line of output, indicate the line breaks with slashes as in "x / y / z" to indicate three lines of output with "x" followed by "y" followed by "z". If the statement does not compile, write "COMPILER ERROR". If a statement would crash at runtime or cause unpredictable behavior, write "CRASH".

								Output:
var1->m1();						Ca1  Tu2  Ca2  
var1->m3();						COMPILER ERROR
var2->m2();						Tu2  Ca2  
var2->m3();						Tu3  Js1  Ca1  Tu2  Ca2  
var2->m4();						COMPILER ERROR
((Tulip*) var1)->m3();			Tu3  Ca1  Tu2  Ca2  
((Tulip*) var1)->m4();			COMPILER ERROR
((Jesse*) var1)->m4();			CRASH
((Cassidy*) var2)->m3();		COMPILER ERROR
((Jesse*) var2)->m4();			Js4  Tu2  Ca2  
